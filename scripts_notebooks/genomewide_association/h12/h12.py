#A script to calculate H12. It requires permutated data of the two cohorts being compared. This is generated by the script [./genomewide_association/fst/llineup_random_permutations.r]

from sys import argv
import numpy as np
import pandas as pd
import malariagen_data
import allel
from sys import stdout
from pathlib import Path

if (len(argv) == 4):
    cohort = argv[1]
    contig = argv[2]
    num_randomisations = int(argv[3])
else:
    raise Exception("Fail. There should be three command line arguments (cohort, contig, num_randomisations).")


window_size = 1000

ag3 = malariagen_data.Ag3(pre = True)
metadata = ag3.sample_metadata(
    sample_sets=["1288-VO-UG-DONNELLY-VMF00168","1288-VO-UG-DONNELLY-VMF00219"], 
    sample_query = "aim_species == 'gambiae'"
)
randomisations = pd.read_csv("/home/harunnn/lstm_scratch/network_scratch/llineup/llineup-genomics/fst/data/net_round_randomisations_pop.csv", sep='\t')

#### make sure all metadata samples are in the randomisations file 
metadata = metadata.query(f"sample_id in {randomisations['sample_id'].to_list()}")
ids = metadata['sample_id']
# make sure randomisations have only samples in the metadata
random = randomisations.query("sample_id in @ids")
cohort_ids = random.query(f"population == @cohort")['sample_id'].to_list()
print(f"Getting biallelic mask for {cohort} {contig}")

#haplotypes
ds_haps = ag3.haplotypes(
    region=contig,
    analysis="gamb_colu",
    sample_query=f"sample_id in {cohort_ids}",
    sample_sets=None,
)

gt = allel.GenotypeArray(ds_haps["call_genotype"].data)

ac = gt.count_alleles()
biallelic_mask = ac.is_biallelic()

ds_haps = ds_haps.isel(variants=biallelic_mask)
ht = gt[biallelic_mask, :].to_haplotypes()

metadata.set_index('sample_id', inplace = True)
unique_sample_id = np.unique(ds_haps['sample_id'])

#dup hap ids
hap_ids = np.repeat(unique_sample_id,2)

pos = ds_haps["variant_position"].values
midpoints = allel.moving_statistic(pos, statistic=np.mean, size=window_size)
startpoints = allel.moving_statistic(pos, statistic=np.min, size=window_size)
endpoints = allel.moving_statistic(pos, statistic=np.max, size=window_size)

#h12
pre_post_dict = {}
pre_post_dict['pre'] = random.query(f"control_phase == 'pre' & population == @cohort")['sample_id']
pre_post_dict['post']  = random.query(f"control_phase == 'post' & population == @cohort")['sample_id']
h12_df_dict = {}
for pheno in ['pre', 'post']:

    subsample_ht = ht[:, np.isin(hap_ids, pre_post_dict[pheno])]
    print(f"--------- Running H12 on {cohort} {pheno} | Chromosome {contig} ----------")
    h1, h12, h123, h2_h1 = allel.moving_garud_h(subsample_ht, size=window_size)
    h12_df_dict[pheno] = pd.DataFrame({'startpoint': startpoints, 
                                       'endpoint': endpoints, 
                                       'midpoint':midpoints, 
                                       'h12':h12})


#h12 randomisation
randomised_h12_dict = {'pre': dict(), 'post': dict()}
for i in np.arange(1, num_randomisations+1):
    i = '%0.5d' % i

    pre_post_dict['pre'] = random.query(f"r{i} == 'pre' & population == @cohort")['sample_id']
    pre_post_dict['post']  = random.query(f"r{i} == 'post' & population == @cohort")['sample_id']

    for pheno in ['pre', 'post']:

        subsample_ht = ht[:, np.isin(hap_ids, pre_post_dict[pheno])]
        print(f"--------- Running H12 on {cohort} {pheno} randomisation {i} | Chromosome {contig} ----------")
        h1, h12, h123, h2_h1 = allel.moving_garud_h(subsample_ht, size=window_size)
        randomised_h12_dict[pheno][f"r{i}"] = h1
        
        
        
#save
randomised_h12_df_pre = pd.DataFrame(randomised_h12_dict['pre'])
randomised_h12_df_post = pd.DataFrame(randomised_h12_dict['post'])
h12_df_pre = pd.concat([h12_df_dict['pre'], randomised_h12_df_pre], axis = 1)
h12_df_post = pd.concat([h12_df_dict['post'], randomised_h12_df_post], axis = 1)

h12_df_pre.to_csv("~/lstm_scratch/llineup/llineup-genomics/h12/data/H12_{}.pre.{}.tsv".format(cohort, contig), sep="\t", index=False)
h12_df_post.to_csv("~/lstm_scratch/llineup/llineup-genomics/h12/data/H12_{}.post.{}.tsv".format(cohort, contig), sep="\t", index=False)

